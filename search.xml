<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>arthas内存分析工具</title>
      <link href="/2025/07/29/arthas%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
      <url>/2025/07/29/arthas%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Arthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修改应用代码的情况下，对业务问题进行诊断，包括查看方法调用的出入参、异常，监测方法执行耗时，类加载信息等，大大提升线上问题排查效率。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/alibaba/arthas/releases</span><br></pre></td></tr></table></figure><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -jar arthas-boot.jar//执行该程序的用户需要和目标进程具有相同的权限。</span><br><span class="line">如果 attach 不上目标进程，可以查看~/logs/arthas/</span><br><span class="line">选择对应的进程attach</span><br></pre></td></tr></table></figure><p><img src="http://cdn.jsdelivr.net/gh/z2field/Picture@main/20250729050438814.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dashboard//展示当前进程的信息</span><br></pre></td></tr></table></figure><p><img src="http://cdn.jsdelivr.net/gh/z2field/Picture@main/img/20250729051019416.png"></p><p><code>sc *.Filter</code>搜索Filter类型内存马</p><p><img src="http://cdn.jsdelivr.net/gh/z2field/Picture@main/img/20250729051357726.png"></p><p>官方命令文档<a href="https://arthas.aliyun.com/doc/sc.html">sc | arthas</a></p><h2 id="离线环境使用"><a href="#离线环境使用" class="headerlink" title="离线环境使用"></a>离线环境使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//下载全量包</span><br><span class="line">https://github.com/alibaba/arthas/releases/download/arthas-all-4.0.5/arthas-bin.zip</span><br><span class="line">//解压</span><br><span class="line">unzip arthas-bin.zip</span><br><span class="line">//安装</span><br><span class="line">./install-local.sh</span><br><span class="line">//使用</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Writing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代理</title>
      <link href="/2025/07/15/Java%E4%BB%A3%E7%90%86/"/>
      <url>/2025/07/15/Java%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Java代理"><a href="#Java代理" class="headerlink" title="Java代理"></a>Java代理</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>首先新建一个IUser接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface IUser &#123;</span><br><span class="line">    void show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现这个接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class UserImpl implements IUser&#123;</span><br><span class="line">    public UserImpl()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void show()&#123;</span><br><span class="line">        System.out.println(&quot;展示&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        IUser user = new UserImpl();</span><br><span class="line">        user.show();//输出字符展示</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用代理调用</p><p>创建代理类UserProxy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class UserProxy implements IUser&#123;</span><br><span class="line">    IUser user;</span><br><span class="line">    public UserProxy()&#123;&#125;</span><br><span class="line">    public UserProxy(IUser user)&#123;</span><br><span class="line">        this.user=user;</span><br><span class="line">    &#125;</span><br><span class="line">    public void show()&#123;</span><br><span class="line">        user.show();</span><br><span class="line">        System.out.println(&quot;代理调用show()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        IUser user = new UserImpl();</span><br><span class="line">        IUser userProxy = new UserProxy(user);</span><br><span class="line">        userProxy.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">展示</span><br><span class="line">代理调用show()</span><br></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>修改接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface IUser &#123;</span><br><span class="line">    void show();</span><br><span class="line"></span><br><span class="line">    void create();</span><br><span class="line">    void update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class UserImpl implements IUser&#123;</span><br><span class="line">    public UserImpl()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void show()&#123;</span><br><span class="line">        System.out.println(&quot;展示&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void create() &#123;</span><br><span class="line">        System.out.println(&quot;动态代理调用create()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        System.out.println(&quot;动态代理调用update()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>newProxyInstance方法需要传入三个参数，类加载器，接口数组，还有就是调用处理器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static Object newProxyInstance(ClassLoader loader,</span><br><span class="line">                                          Class&lt;?&gt;[] interfaces,</span><br><span class="line">                                          InvocationHandler h)</span><br></pre></td></tr></table></figure><p>动态代理调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        IUser user = new UserImpl();</span><br><span class="line"></span><br><span class="line">        UserInvocationHandler userInvocationHandler = new UserInvocationHandler(user);</span><br><span class="line">        IUser userProxy = (IUser) Proxy.newProxyInstance(user.getClass().getClassLoader(), user.getClass().getInterfaces(), userInvocationHandler);</span><br><span class="line">        //user.getClass().getInterfaces() == new Class[]&#123;IUser.class&#125;</span><br><span class="line">        userProxy.show();</span><br><span class="line">        userProxy.create();</span><br><span class="line">        userProxy.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">展示</span><br><span class="line">动态代理调用create()</span><br><span class="line">动态代理调用update()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Writing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2025/07/07/Java/"/>
      <url>/2025/07/07/Java/</url>
      
        <content type="html"><![CDATA[<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jps//Java 进程状态</span><br><span class="line">jmap -dump:format=b,file=/tmp/tmp.hprof 12345//导出堆信息</span><br></pre></td></tr></table></figure><h2 id="jar"><a href="#jar" class="headerlink" title="jar"></a>jar</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.编译</span><br><span class="line">javac .\SayHello.java</span><br><span class="line">2.打包</span><br><span class="line">jar -cvf MyJarTest.jar .\SayHello.class</span><br><span class="line">提示 MyJarTest.jar 中没有主清单属性</span><br><span class="line">3.jar -cvfm .\MyJarTest.jar .\MANIFEST.MF .\SayHello.class</span><br><span class="line">//MANIFEST.MF文件内容</span><br><span class="line">Manifest-Version: 1.0</span><br><span class="line">Main-Class: SayHello</span><br><span class="line"></span><br><span class="line">//上边换行最好带上</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名.class 相当于返回这个类的对象 任何一个类，都会有一个Class对象于这个类对应</span><br><span class="line">比如  Runtime.class =&gt; 返回一个Runtime对象</span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">调用流程</span><br><span class="line">首先，使用Class t = Class.forName(&quot;Test&quot;)获取类的原型</span><br><span class="line">然后 Constructor constructor = t.getConstructor() 获取无参构造器</span><br><span class="line">把获取到的无参构造器通过constructor.NewInstance(),用父类Object实例化,得到实例化对象o</span><br><span class="line">Object o = constructor.NewInstance()</span><br><span class="line">用Method类中的getMethod()通过类的原型t来获取方法</span><br><span class="line">Method m = t.getMethod(&quot;hi&quot;)</span><br><span class="line">最后再用Method类的invoke()来执行方法</span><br><span class="line">m.invoke(o);//调用t原型的hi方法，对象为o</span><br></pre></td></tr></table></figure><h4 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h4><p>关于invoke<br>如果这个方法是一个普通方法，那么第一个参数是类对象<br>如果这个方法是一个静态方法，那么第一个参数是类<br>正常执行方法是 [1].method([2], [3], [4]…)其实在反射里就是<br>method.invoke([1], [2], [3], [4]…) </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, IOException &#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        runtime.exec(&quot;calc&quot;);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line">        Method getRuntime = c.getMethod(&quot;getRuntime&quot;);</span><br><span class="line">        Method exec = c.getMethod(&quot;exec&quot;, String.class);</span><br><span class="line">        </span><br><span class="line">        //本来应该是Runtime.getRuntime()，那么反射调用就是 getRuntime.invoke(c)</span><br><span class="line">        Object o = getRuntime.invoke(c);  </span><br><span class="line">        </span><br><span class="line">        //本来应该是Runtime.getRuntime().exec(&quot;calc&quot;)，那么反射调用就是exec.invoke(Runtime.getRuntime(),&quot;calc&quot;)</span><br><span class="line">        exec.invoke(o,&quot;calc&quot;);           </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//注意，如果是 private方法，需要用getDeclaredMethod()方法调用</span><br><span class="line">调用之后，调用</span><br><span class="line">方法来允许我们操作私有方法</span><br><span class="line">获取属性应该从原型类中获取</span><br><span class="line">修改类的属性从实例中修改</span><br><span class="line">应该setAccessible(true)修改实例的private</span><br><span class="line">获取方法的也是从原型类中获取</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">序列化/反序列化基本要求:一个类要想实现序列化和反序列化，就必须继承Serializable接口</span><br><span class="line"></span><br><span class="line">序列化:</span><br><span class="line">java.io.ObjectOutputStream</span><br><span class="line">包装一个其他类型的输出流,然后通过其自带的writeObject方法写入对象。</span><br><span class="line"></span><br><span class="line">FileOutputStream//文件输出流，将序列化后的字节序列写入特定的文件中</span><br><span class="line"></span><br><span class="line">反序列化：</span><br><span class="line">java.io.ObjectInputStream</span><br><span class="line">包装一个其他类型的输入流，然后通过其自带的readObject方法写入对象。</span><br><span class="line">FileInputStream   //文件输入流，从特定的文件中读取出字节序列</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="主要利用方法"><a href="#主要利用方法" class="headerlink" title="主要利用方法"></a>主要利用方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">readObject()</span><br><span class="line">invoke()</span><br><span class="line">Runtime没有继承序列化 但是Runtime.class可以序列化</span><br><span class="line">Runtime的构造器也是私有的 但是有一个静态方法getRuntime</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h2><h3 id="如何将普通项目变为maven项目"><a href="#如何将普通项目变为maven项目" class="headerlink" title="如何将普通项目变为maven项目"></a>如何将普通项目变为maven项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023版本以上，点击help--&gt; find action     Add Framework Support</span><br></pre></td></tr></table></figure><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如何将普通项目变为maven项目</span><br><span class="line">2023版本以上，点击help--&gt; find action     Add Framework Support</span><br><span class="line"></span><br><span class="line">maven仓库问题</span><br><span class="line">appearance &amp; behavior --&gt; system setting  --&gt; 取消勾选 Reopen projects on startup</span><br></pre></td></tr></table></figure><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Alt + L//快速格式化代码</span><br><span class="line">ctrl+alt+shift+F7//设置搜索范围 ALL place太繁杂 不好跟踪</span><br><span class="line">Ctrl+Alt+鼠标左键//进入父类</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Writing </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
